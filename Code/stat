#!/bin/bash

# This command runs a program multiple times, pushing output from perf to stdout
# $ ./stat Empty/a.out -e cycles:u,instructions:u -n 100 > Empty/stat.dat
# $ ./plot Empty/stat.dat cycles:u | gnuplot -persist

stat="\
instructions:u,\
cycles:u,\
cache-references:u,\
cache-misses:u,\
branches:u,\
branch-misses:u,\
bus-cycles:u,\
faults:u,\
cs";

prog=$1; n=100

let OPTIND++; # Ignore first options token in getops
while getopts ":e:n:" option
do
    case $option in
        e) stat=$OPTARG ;;
        n) n=$OPTARG ;;
        \?) echo "Usage: $ ./run <program> [-e <counters>] [-n <runs>]" >&0 ; exit ;;
    esac
done

ASLR=`cat /proc/sys/kernel/randomize_va_space`
if [ $ASLR != 0 ]
then
    echo "Disabling address space layout randomization ..." >&0
    sudo bash -c "echo 0 > /proc/sys/kernel/randomize_va_space"
    exit
fi

for i in `seq $n`
{
    # Change environment (TODO)

    # Run program and store results
    # perf stat writes output to stderr, redirect to stdout
    echo ""
    echo "# Run $i"
    perf stat -e $stat -x" " $prog 0>&1 
    #--output $output --append "$prog"
}

