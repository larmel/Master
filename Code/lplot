#!/usr/bin/env python
import matplotlib.pyplot as plt
import argparse, string
from matplotlib import rc
from matplotlib.ticker import FuncFormatter

def parse_arguments():
    parser = argparse.ArgumentParser(description='Plot lperf data')
    parser.add_argument('file', default='stat.csv')
    parser.add_argument('-e', '--events', default='all')
    parser.add_argument('-t', '--title', default='Figure 1')
    parser.add_argument('-x', '--xlabel', default='')
    parser.add_argument('-y', '--ylabel', default='')
    parser.add_argument('-l', '--legend')
    args = parser.parse_args()
    args.events = map(string.lower, args.events.strip().split(','))
    return args

def read_file(events, csv):
    lines = []
    with open(csv) as f:
        for line in f:
            e = map(lambda s : s.strip(), line.split(','))
            if events == ['all'] or e[1].lower() in events:
                lines.append({'mnemonic': e[0], 'event': e[1], 'count': map(float, e[3:])})
    return lines

def plot_lines(data, args):
    rc('text', usetex=True)
    rc('font', family='serif', serif='Computer Modern Roman', size=10)
    plt.figure(args.title, facecolor='white', edgecolor='white', figsize=(7,3.5))
    plt.xlabel(args.xlabel)
    plt.ylabel(args.ylabel)
    plt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: '{:0,d}'.format(int(x))))
    for line in data:
        label = line['event'] if line['mnemonic'] == '' else line['mnemonic']
        plt.plot(line['count'], label='{{{e}}}'.format(e=label.replace('_', '\_')))
    plt.grid(True)
    if args.legend != None:
        plt.legend(loc=args.legend, frameon=True, prop={'size':10}).draggable()
    plt.tight_layout()
    plt.savefig(args.title + '.eps', format='eps', dpi=300)
    plt.show()

if __name__ == '__main__':
    args  = parse_arguments()
    lines = read_file(args.events, args.file)
    plot_lines(lines, args)
