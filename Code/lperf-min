#!/usr/bin/env python 
import subprocess, argparse, sys, copy
from scipy import stats

# Note: This is the minified (read: "fixed") version included in the thesis

# Use at most 4 counters simultaneously
n_counters = 4

def disable_layout_randomization():
    subprocess.call('sudo bash -c "echo 0 > /proc/sys/kernel/randomize_va_space"', shell=True)

def benchmark(events, args):
    for e in events:
        e['count'] = [0]*args.num
        e['variance'] = [0]*args.num

    environment = {'FOO':'0'*args.environment_offset}
    argument = args.argument_offset;

    for run in range(args.num):
        tempfile = 'stat.tmp.' + str(run) + '.dat'
        subprocess.call('cp /dev/null '+tempfile, shell=True)

        for batch in [events[i:i+n_counters] for i in range(0, len(events), n_counters)]:
            e = ','.join(map(lambda x: x['code'], batch))
            c = ' '.join(['perf stat -r', str(args.repeat), '-x","', '-e', e, args.program, str(argument), '0>>', tempfile])
            p = subprocess.Popen(c, env=environment, shell=True)
            p.wait()

        with open(tempfile, 'r') as f:
            for i in range(len(events)):
                line = f.readline().strip().split(',')
                if (line[0] == "<not counted>"):
                    continue
                events[i]['count'][run] = float(line[0])
                if args.repeat > 1:
                    events[i]['variance'] = float(line[2][:-1])
        subprocess.call('rm '+tempfile, shell=True)

        environment['FOO'] += '0'*args.environment_increment
        argument += args.argument_increment;
    
    return events

def correlation(events, reference_event):
    reference = events[0]
    for i in range(len(events)):
        if events[i]['code'] == reference_event or events[i]['perfmn'] == reference_event:
            reference = events[i]
            break
    for e in events:
        e['pearson'], _ = stats.pearsonr(reference['count'], e['count'])

def export_csv(events, filename):
    with open(filename, 'w') as f:
        for line in events:
            row = [line['mnemonic'], line['code']] + [line['pearson']] + map(str, line['count'])
            f.write(','.join(map(str, row)))
            f.write('\n')

# Read file containing [perf-code, perf-mnemonic, description] 
# as tab separated values
def read_file_events(filename):
    events = []
    with open(filename) as f:
        for line in f:
            code, perfmn, name = map(lambda s : s.strip(), line.split('\t'))
            code = ''.join(['r', code.lower(), ':u']) if perfmn == '' else perfmn+':u'
            events.append({'code': code, 'perfmn': perfmn, 'mnemonic': name})
    return events

# Match events specified with "-e" flag with metadata from file
def filter_events(file_events, include):
    if include == []:
        return file_events
    events = []
    for e in include:
        found = False
        for s in file_events:
            if s['code'] == e or s['mnemonic'] == e:
                found = True
                events.append(copy.copy(s))
        if not found:
            print "Adding unknown event", e
            events.append({'code': e, 'perfmn': '', 'mnemonic': ''})
    return events

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Automated perf runner')
    parser.add_argument('program', help='program to be run, ex ./a.out')
    parser.add_argument('-e', '--events')
    parser.add_argument('-f', '--event-file', default='counters')
    parser.add_argument('-o', '--output', default='stat.csv')
    parser.add_argument('-n', '--num', type=int, default=2)
    parser.add_argument('-r', '--repeat', type=int, default=1)
    parser.add_argument('-c', '--correlate', default='cycles:u')
    parser.add_argument('--environment-offset', type=int, default=0)
    parser.add_argument('--environment-increment', type=int, default=1)
    parser.add_argument('--argument-offset', type=int, default=0)
    parser.add_argument('--argument-increment', type=int, default=0)
    args = parser.parse_args()

    # Make memory layout deterministic    
    disable_layout_randomization()

    # List of event properties [[code, perfmnemonic, description]]
    events = filter_events(read_file_events(args.event_file), [] if args.events == None else args.events.strip().lower().split(','))
    events = benchmark(events, args)

    # Export result
    correlation(events, args.correlate)
    export_csv(events, args.output)
