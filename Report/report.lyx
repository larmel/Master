#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Analyzing Context Bias of Program Execution on Modern CPUs
\end_layout

\begin_layout Author
Lars Kirkholt Melhus
\end_layout

\begin_layout Standard
Supervisor: Anne C.
 Elster
\end_layout

\begin_layout Standard
Co-supervisor: Rune E.
 Jensen
\end_layout

\begin_layout Abstract
This is the empty abstract.
 Fin.
 Test citation 
\begin_inset CommandInset citation
LatexCommand cite
key "ProdWrongData,PCDeterministic"

\end_inset


\end_layout

\begin_layout Section*
Problem Description
\end_layout

\begin_layout Standard
Variations in execution context has been shown to affect performance of
 programs on recent CPUs.
 Previous work has looked at offsetting the stack and changing link order
 -- biasing performance measurements towards certain configurations.
 Variables such as the placement of stack, heap and text segments in memory,
 combined with memory access instructions, can impact program performance
 quite significantly.
 
\end_layout

\begin_layout Standard
The goal of this project is to model some of these effects for common use
 cases, and methods for avoiding them, in order to avoiding bias and achieving
 peak performance.
 These effects might be highly platform dependent, so to limit the scope
 we will focus on a particular architecture, the Intel Core i7 "Ivy Bridge".
 Case studies will include small isolated programs, and ideally also "real"
 applications such as FFT algorithms.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
Catchy introduction about the blissful ignorance currently employed by the
 scientific comunity.
 
\end_layout

\begin_layout Section
Measurement Bias
\end_layout

\begin_layout Standard
Papers exploring measurement bias.
 Fancy graphic of memory layout.
 Conclusion that this is an unsolved problem.
 
\end_layout

\begin_layout Section
Outline
\end_layout

\begin_layout Standard
The purpose of this report is to explore ways to tackle the effects of measureme
nt bias.
 Previous work has focused mostly on ways to eliminate the effects in order
 to produce reliable measurements -- working towards a more statistically
 valid methodology employed in the computer science community.
 Our approach is slightly different.
 If bias could be controlled in certain situations, we could change program
 or environment to enhance performance -- essentially control the bias to
 work in our favor.
 
\end_layout

\begin_layout Description
Chapter
\begin_inset space ~
\end_inset

2 begins by looking at some of the previous work done.
 Most of this is documenting measurement bias.
\end_layout

\begin_layout Description
Chapter
\begin_inset space ~
\end_inset

3 hopefully contains some actual smart stuff, we'll see :)
\end_layout

\begin_layout Chapter
Background and Related Work
\end_layout

\begin_layout Standard
Background from papers
\end_layout

\begin_layout Section
Performance Counters
\end_layout

\begin_layout Standard
The most powerful tools available for assessing performance on real hardware
 is hardware performance coutners.
\end_layout

\begin_layout Subsection
Accuracy of Performance Counters
\end_layout

\begin_layout Standard
Unfortunately, performance counters are not necessarily accurate or predictable.
 Several papers have looked at the relationship between measured counts
 and the 
\begin_inset Quotes eld
\end_inset

right answer
\begin_inset Quotes erd
\end_inset

.
 For certain metrics it is quite easy to verify wether the reported counts
 are accurate.
 One example is the number of retired instructions, for the perf utility
 reported as instructions:u.
 At least for small programs, we can easily count the number of dynamic
 intructions and compare to reported counts.
 
\end_layout

\begin_layout Chapter
Methods and Implementation
\end_layout

\begin_layout Standard
Create a cool performance model, and programs to replicate the effect.
 Suggest empirical solutions.
\end_layout

\begin_layout Chapter
Results
\end_layout

\begin_layout Standard
Graphs illustrating the effect in generated or constructed examples.
 Effects of applying heuristics.
 Ideally some results from applying this to FFT.
\end_layout

\begin_layout Chapter
Conclusions and Future Work
\end_layout

\begin_layout Standard
Sure this is an easy section.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "bibtotoc,plain"

\end_inset


\end_layout

\end_body
\end_document
